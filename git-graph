#!/bin/bash

#  git-graph - print pretty git branch sync status reports
#
#  Copyright 2016-2018 bill-auger <https://github.com/bill-auger>
#
#  git-graph is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  git-graph is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License version 3
#  along with git-graph.  If not, see <http://www.gnu.org/licenses/>.


readonly JOIN_CHAR='~'
readonly HRULE_CHAR='-'
readonly GRAPH_REGEX="(.+)"
readonly ID_REGEX="(.+)"
readonly DATE_REGEX="(.+)"
readonly AUTHOR_REGEX="(.+)"
readonly SIG_REGEX="\[(([^\(\)]*) + *\(?.*\)? *<.*>|)\]"
readonly STAT_REGEX="\[(.)\]"
readonly MSG_REGEX="(.*)"
readonly REFS_REGEX="\((.*)\)"
readonly GIT_LOG_FMT="git log --graph --date=short -n %d --pretty=format:"
readonly LOG_FMT="%h$JOIN_CHAR%ad$JOIN_CHAR%an$JOIN_CHAR[%GS]$JOIN_CHAR[%G?]$JOIN_CHAR%s$JOIN_CHAR(%D)"
readonly LOG_REGEX="^$GRAPH_REGEX $ID_REGEX$JOIN_CHAR$DATE_REGEX$JOIN_CHAR$AUTHOR_REGEX$JOIN_CHAR$SIG_REGEX$JOIN_CHAR$STAT_REGEX$JOIN_CHAR$MSG_REGEX$JOIN_CHAR$REFS_REGEX$"
readonly CWHITE='\033[0;37m'
readonly CGREEN='\033[0;32m'
readonly CYELLOW='\033[0;33m'
readonly CRED='\033[0;31m'
readonly CBLUE='\033[0;34m'
readonly CEND='\033[0m'
readonly CGOOD=$CGREEN
readonly CUNKNOWN=$CYELLOW
readonly CBAD=$CRED
readonly CNONE=$CWHITE
readonly ID_COLOR=$CNONE
readonly DATE_COLOR=$CNONE
readonly AUTHOR_COLOR=$CNONE
readonly MSG_COLOR=$CNONE
readonly REF_COLOR=$CBLUE

declare -a graphs=()
declare -a ids=()
declare -a dates=()
declare -a authors=()
declare -a sigs=()
declare -a msgs=()
declare -a refs=()
author_w=0


# helpers

function DoesBranchExist # (branch_name)
{
  [ "$(git branch | grep -G " $1$")" ] && echo 1 || echo 0
}

function DoesTagExist # (tag_name)
{
  [ "$(git tag    | grep -G "$1$")"  ] && echo 1 || echo 0
}

function JoinChars # (a_string)
{
  echo "${1// /$JOIN_CHAR}"
}

function FilterJoinChars # (a_string)
{
   echo $1 | tr "$JOIN_CHAR" " "
}


# parse cli args
while getopts 'n:' arg
do case "${arg}" in
        n) n_commits="${OPTARG}" ;;
        *) echo "Invalid argument: '${arg}'" ;;
    esac
done
readonly N_COMMITS=${n_commits:-12}
ref=${!OPTIND}
(( $(DoesBranchExist $1) )) || (( $(DoesTagExist $1) )) || [ -f "$1" ] && readonly REF=$1
[ "$REF" != "$1" ] && echo -e "no such branch, tag, or file: '$1'\n"


# compile results
while read -r commit
do
# TODO: graph colors and fork/merge node lines
# printf "commit='%s'\n" "$commit" ; [[ $commit =~ $LOG_REGEX ]] && printf "graph='%s'\n" "${BASH_REMATCH[1]}" || printf "graph NFG='%s'\n" "$commit"

[[ $commit =~ $LOG_REGEX ]] || continue

   graph=${BASH_REMATCH[  1]} ; graphs=( ${graphs[@]}  $(JoinChars "$graph" )) ;
   id=${BASH_REMATCH[     2]} ; ids=(    ${ids[@]}     $(JoinChars "$id"    )) ;
   date=${BASH_REMATCH[   3]} ; dates=(  ${dates[@]}   $(JoinChars "$date"  )) ;
   author=${BASH_REMATCH[ 4]} ; authors=(${authors[@]} $(JoinChars "$author")) ;
   sig=${BASH_REMATCH[    6]} ; sigs=(   ${sigs[@]}    $(JoinChars "$sig"   )) ;
   stat=${BASH_REMATCH[   7]} ; stats=(  ${stats[@]}   $(JoinChars "$stat"  )) ;
   msg=${BASH_REMATCH[    8]} ; msgs=(   ${msgs[@]}    $(JoinChars "$msg"   )) ;
   ref=${BASH_REMATCH[    9]} ; refs=(   ${refs[@]}    $(JoinChars "$ref"   )) ;
   [ "$msg"         ] ||        msgs=(   ${msgs[@]}    "<EMPTY>"             )
   [ "$stat" == 'E' ] &&        sigs=(   ${sigs[@]}    "<UNKNOWN>"           ) || \
   [ "$sig"         ] ||        sigs=(   ${sigs[@]}    "$JOIN_CHAR"          )
   [ "$ref"         ] ||        refs=(   ${refs[@]}    "$JOIN_CHAR"          )

   case $stat in
        'G') sig_colors=(${sig_colors[@]} "$CGOOD"   ) ;; # valid signature
        'X') sig_colors=(${sig_colors[@]} "$CGOOD"   ) ;; # valid signature that has expired
        'U') sig_colors=(${sig_colors[@]} "$CUNKNOWN") ;; # valid signature with unknown validity
        'E') sig_colors=(${sig_colors[@]} "$CUNKNOWN") ;; # cannot be checked (e.g. missing key)
        'B') sig_colors=(${sig_colors[@]} "$CBAD"    ) ;; # bad signature
        'Y') sig_colors=(${sig_colors[@]} "$CBAD"    ) ;; # valid signature made by an expired key
        'R') sig_colors=(${sig_colors[@]} "$CBAD"    ) ;; # valid signature made by a revoked key
        'N') sig_colors=(${sig_colors[@]} "$CNONE"   ) ;; # no signature
   esac

   [ ${#author} -gt $author_w ] && author_w=${#author}
done <<<$($(printf "$GIT_LOG_FMT" $N_COMMITS)"$LOG_FMT" $REF)

# pretty print results
for (( result_n = 0 ; result_n < ${#ids[@]} ; result_n++ ))
do graph=${graphs[$result_n]}
   id=${ids[$result_n]}
   date=${dates[$result_n]}
   author=${authors[$result_n]}
   sig=${sigs[$result_n]}
   stat=${stats[$result_n]}
   msg=${msgs[$result_n]}
   ref=${refs[$result_n]}
   sig_color=${sig_colors[$result_n]}
   pad="%$(($author_w - ${#author}))s"

  [ "$ID_COLOR"         ] && id_color=$ID_COLOR      || id_color=$sig_color
  [ "$DATE_COLOR"       ] && date_color=$DATE_COLOR  || date_color=$sig_color
  [ "$author" == "$sig" ] && author_color=$sig_color || author_color=$AUTHOR_COLOR
  [ "$MSG_COLOR"        ] && msg_color=$MSG_COLOR    || msg_color=$sig_color
  [ "$REF_COLOR"        ] && ref_color=$REF_COLOR    || ref_color=$sig_color

#    printf "$graph_color$(FilterJoinChars $graph) $CEND"
   printf "$id_color$id $CEND"
   printf "$date_color$date $CEND"
   printf "$author_color$(FilterJoinChars $author)$CEND"
   printf "$msg_color:$pad $(FilterJoinChars $msg)$CEND"
   [ "$ref" != "$JOIN_CHAR" ] && printf " $ref_color($(FilterJoinChars $ref))$CEND"
   [ "$sig" != "$JOIN_CHAR" ] && printf " $sig_color[$(FilterJoinChars $sig)]$CEND"
   printf "\n"
done
